#!/bin/bash

PacmanCache=$(pacman-conf Cachedir)
SED='s/-S//g;s/yyu/Update system/g;s/-b . yw//g;s/--noconfirm//g;s/--needed//g'
ARIA2C="-d "$PacmanCache" -Z -c -s4 -k5M -x10 -j10 -t10 \
	--console-log-level=error --download-result=hide  --file-allocation=falloc --summary-interval=0 --retry-wait=0"

NC='\033[0m' # No Color
On_White='\e[1;30;107m'
On_Green='\e[1;97;42m'

trap ctrl_c INT

function ctrl_c() {
  clean
  exit 0
}

function clean() {
  find "$PacmanCache" -type f -name "*.aria2" | while read f ; do
  name=$(basename "$f" .aria2)
  rm -f "$PacmanCache$name" "$f" #2>/dev/null #>/dev/null 2>&1
  done
}

function print() (
  c1width=10
  cols=$(tput cols)
  c2width=$((cols - c1width - 1))
  readarray -t lines < <(printf '%s' "$2" | fmt -w $c2width)
  for((line=0; line < ${#lines[*]}; line++))
  do
    if [ $line -eq 0 ]
    then
      col1="$1"
    else
      col1=" "
    fi
    printf "%-${c1width}s %-${c2width}s\n" "$col1" "${lines[line]}"
  done
)

if ping -c 1 -W 1 8.8.8.8 2>/dev/null | grep -q -i "ttl"; then
  ARIA2C="$ARIA2C --async-dns-server=8.8.8.8"
fi

if [ "$OSTYPE" = "linux-gnu" ]; then
	[ "`whoami`" = "root" ] || exec sudo "$0" "$@"
fi

#if [ echo "$@" | grep -q "\-M" || echo "$@" | grep -q "\--mirror"; then
#echo "mirror"
#fi

#if [ $(command -v pacman) ] && echo "$@" | grep -q "\-Sy"; then
#  echo -e "\n\e ${On_Green} PacFast ${On_White} Refresh of all package databases \e[0m"
#  pacman -Sy
#fi

if [[ $@ == *"-m"* ]] || [[ $@ == *"--mirror"* ]]; then
echo "mirror"
test=$(echo $@ | sed 's/-m//g' | sed 's/--mirror//g')
fi

if [ $(command -v pacman) ] && echo "$@" | grep -q "\-S"; then
  [ $(command -v aria2c) ] || pacman -S --noconfirm --needed aria2
  [[ $(echo "$1") == *"y"* ]] && echo -e "\n\e ${On_Green} PacFast ${On_White} Refresh of all package databases \e[0m" && pacman -Sy
  [ -z ${@:2} ] || [ ${@:2} = "-m" ] && [[ $(echo "$1") != *"u"* ]] && ctrl_c



  clean
  # Create new jobs
  list=$(pacman $@ --print --print-format "%l" | grep -E -o -e "(ht|f)tp[s]?://[^\']+")
  total=$(pacman $@ --print --print-format "%s" | awk '{size+=$1} END {print size}')
  number=$(echo "$list" | wc -l)
  #repository=$(pacman $@ --print --print-format "%r")
  
suffix='B'
if [ $( echo "$total > 1024" | bc ) = 1 ]; then
        total=$( echo "scale=2; $total / 1024" | bc )
        suffix='KiB'
        if [ $( echo "$total > 1024" | bc ) = 1 ]; then
                total=$( echo "scale=2; $total / 1024" | bc )
                suffix='MiB'
		if [ $( echo "$total > 1024" | bc ) = 1 ]; then
		        total=$( echo "scale=2; $total / 1024" | bc )
		        suffix='GiB'
		fi
	fi
fi

  echo -e "\n\e ${On_Green} PacFast ${On_White} Downloading $number Package(s) for a total size of $total $suffix \e[0m"
  optd=$(echo $namever | xargs -n1 | sort | xargs | column -t)
  print "$optf" "$optd" && echo " "
  
  ARCH=`(uname -m) 2>/dev/null` || ARCH=x86_64
optd=$(echo "$list" | sed 's/.*\///' | sed 's/\.pkg.tar.xz *$//' | sed 's/\-x86_64 *$//' | sed 's/\-any *$//' | xargs -n1 | sort | xargs | column -t)
print "$optf" "$optd" && echo " "

  aria2c $list $ARIA2C
  printf "%s\r%s%s" abcdefghijklmnopqrstuvwxyz $(tput el) "Download finished"
  
  

  # Install package
  echo -e "\n\n\e[1;42m Installing: \e[0m" ${@:2} | sed "$SED"
  pacman $(echo "$1" | sed "s/y//g") $(echo ${@:2} | sed 's/-m//g')
  #pacman -S $test #${@:2}
  exit 1
fi
